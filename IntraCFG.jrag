/* Copyright (c) 2021, Idriss Riouak <idriss.riouak@cs.lth.se>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

aspect IntraCFG {

public
  interface CFGNode {}

public
  interface CFGRoot {}

  Entry implements CFGNode;
  Exit implements CFGNode;

  syn SmallSet<CFGNode> CFGNode.firstNodes() = dynamicFN();
  syn lazy SmallSet<CFGNode> CFGNode.succ()
      circular[SmallSet.<CFGNode>empty()] = nextNodes();
  syn lazy SmallSet<CFGNode> CFGNode.dynamicFN() =
      isAnalysisNode() ? SmallSet.<CFGNode>singleton(this) : succ();
  inh SmallSet<CFGNode> CFGNode.nextNodes();
  inh SmallSet<CFGNode> CFGNode.nextNodesTT();
  inh SmallSet<CFGNode> CFGNode.nextNodesFF();
  syn lazy boolean CFGNode.isAnalysisNode() =
      Analysis.getAnalysisInstance().getActiveNodes().contains(
          getClass().getSimpleName());
  // syn lazy boolean CFGNode.isAnalysisNode() = false;
  // eq Entry.isAnalysisNode() = true;
  // eq Exit.isAnalysisNode() = true;
  // eq VariableDeclarator.isAnalysisNode() = true;
  // eq AssignSimpleExpr.isAnalysisNode() = true;
  // eq AssignAdditiveExpr.isAnalysisNode() = true;
  // eq AssignMultiplicativeExpr.isAnalysisNode() = true;
  // eq AssignShiftExpr.isAnalysisNode() = true;
  // eq AssignBitwiseExpr.isAnalysisNode() = true;
  // eq PostIncExpr.isAnalysisNode() = true;
  // eq PostDecExpr.isAnalysisNode() = true;
  // eq PreIncExpr.isAnalysisNode() = true;
  // eq PreDecExpr.isAnalysisNode() = true;
  // eq VarAccess.isAnalysisNode() = true;
  // eq FieldDeclarator.isAnalysisNode() = true;
  // eq ParameterDeclaration.isAnalysisNode() = true;
  // eq NullLiteral.isAnalysisNode() = true;
  // eq ImplicitAssignment.isAnalysisNode() = true;
  // eq EQExpr.isAnalysisNode() = true;
  // eq NEExpr.isAnalysisNode() = true;
  // eq StringLiteral.isAnalysisNode() = true;
  // eq LambdaDefinition.isAnalysisNode() = true;
  // eq LambdaBody.isAnalysisNode() = true;
  // eq ExprMethodReference.isAnalysisNode() = true;
  // eq ClassReference.isAnalysisNode() = true;
  // eq ParMethodReferenceAccess.isAnalysisNode() = true;
  // eq AmbiguousMethodReference.isAnalysisNode() = true;
  // eq TypeMethodReference.isAnalysisNode() = true;
  // eq ConstructorReference.isAnalysisNode() = true;
  // eq InstanceInitialization.isAnalysisNode() = true;
  // eq Implicit.isAnalysisNode() = true;
  // eq ImplicitCondition.isAnalysisNode() = true;
  // eq NTACloseResource.isAnalysisNode() = true;
  // eq PackageAccess.isAnalysisNode() = true;
  // eq TypeAccess.isAnalysisNode() = true;
  // eq ArrayCreationExpr.isAnalysisNode() = true;
  // eq OrLogicalExpr.isAnalysisNode() = true;
  // eq AndLogicalExpr.isAnalysisNode() = true;
  // eq XorBitwiseExpr.isAnalysisNode() = true;
  // eq OrBitwiseExpr.isAnalysisNode() = true;
  // eq AndBitwiseExpr.isAnalysisNode() = true;
  // eq URShiftExpr.isAnalysisNode() = true;
  // eq RShiftExpr.isAnalysisNode() = true;
  // eq LShiftExpr.isAnalysisNode() = true;
  // eq SubExpr.isAnalysisNode() = true;
  // eq AddExpr.isAnalysisNode() = true;
  // eq ModExpr.isAnalysisNode() = true;
  // eq DivExpr.isAnalysisNode() = true;
  // eq MulExpr.isAnalysisNode() = true;
  // eq PlusExpr.isAnalysisNode() = true;
  // eq MinusExpr.isAnalysisNode() = true;
  // eq LogNotExpr.isAnalysisNode() = true;
  // eq BitNotExpr.isAnalysisNode() = true;
  // eq ParExpr.isAnalysisNode() = true;
  // eq ContinueStmt.isAnalysisNode() = true;
  // eq LongLiteral.isAnalysisNode() = true;
  // eq IntegerLiteral.isAnalysisNode() = true;
  // eq IllegalLiteral.isAnalysisNode() = true;
  // eq FloatingPointLiteral.isAnalysisNode() = true;
  // eq DoubleLiteral.isAnalysisNode() = true;
  // eq CharacterLiteral.isAnalysisNode() = true;
  // eq BooleanLiteral.isAnalysisNode() = true;
  // eq InferredParameterDeclaration.isAnalysisNode() = true;
  // eq EnumConstant.isAnalysisNode() = true;
  // eq CatchParameterDeclaration.isAnalysisNode() = true;
  // eq UncheckedExceptions.isAnalysisNode() = true;
  // eq AssertStmt.isAnalysisNode() = true;
  // eq CatchClause.isAnalysisNode() = true;
  // eq ThrowStmt.isAnalysisNode() = true;
  // eq LocalClassDeclStmt.isAnalysisNode() = true;
  // eq DefaultCase.isAnalysisNode() = true;
  // eq ConstCase.isAnalysisNode() = true;
  // eq ClassInstanceExpr.isAnalysisNode() = true;
  // eq InstanceOfExpr.isAnalysisNode() = true;
  // eq ReturnStmt.isAnalysisNode() = true;
  // eq ResourceDeclaration.isAnalysisNode() = true;
  // eq ArrayAccess.isAnalysisNode() = true;
  // eq SuperAccess.isAnalysisNode() = true;
  // eq ThisAccess.isAnalysisNode() = true;
  // eq ArrayTypeWithSizeAccess.isAnalysisNode() = true;
  // eq SuperConstructorAccess.isAnalysisNode() = true;
  // eq ConstructorAccess.isAnalysisNode() = true;
  // eq GEExpr.isAnalysisNode() = true;
  // eq LEExpr.isAnalysisNode() = true;
  // eq GTExpr.isAnalysisNode() = true;
  // eq LTExpr.isAnalysisNode() = true;
  // eq MethodAccess.isAnalysisNode() = true;

  // Defining Entry and Exit point for each CFGRoot
  syn nta Entry CFGRoot.entry() = new Entry();
  syn nta Exit CFGRoot.exit() = new Exit();

  // Forwarding the exit() and entry() attribute to each CFGSupport node.
  eq CFGRoot.getChild().exit() = exit();
  eq CFGRoot.getChild().entry() = entry();

  inh Exit CFGNode.exit();
  inh Entry CFGNode.entry();

  // Default values for the
  eq CFGRoot.getChild().nextNodes() = SmallSet.<CFGNode>empty();
  eq CFGRoot.getChild().nextNodesTT() = SmallSet.<CFGNode>empty();
  eq CFGRoot.getChild().nextNodesFF() = SmallSet.<CFGNode>empty();

  // Predecessor relation
  syn SmallSet<CFGNode> CFGNode.pred() {
    SmallSet<CFGNode> res = SmallSet.<CFGNode>empty().mutable();
    for (CFGNode pred : predColl()) {
      if (pred.isCFGNode())
        res.add(pred);
    }
    return res;
  }

  syn boolean CFGNode.isCFGNode() circular[false] {
    if (predColl().isEmpty())
      return false;
    for (CFGNode pred : predColl()) {
      if (pred.isCFGNode())
        return true;
    }
    return false;
  }
  eq Entry.isCFGNode() = true;

  coll SmallSet<CFGNode> CFGNode.predColl()[new SmallSet<CFGNode>()];
  CFGNode contributes this to CFGNode.predColl() for each succ();
}