/* Copyright (c) 2021, Idriss Riouak <idriss.riouak@cs.lth.se>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

aspect IntraCFG {

public
  interface CFGNode {}

public
  interface CFGRoot {}

  Entry implements CFGNode;
  Exit implements CFGNode;

  syn SmallSet<CFGNode> CFGNode.firstNodes() = lastNodes();
  syn lazy SmallSet<CFGNode> CFGNode.succ()
      circular[SmallSet.<CFGNode>empty()] = nextNodes();
  syn lazy SmallSet<CFGNode> CFGNode.lastNodes() =
      skip() ? SmallSet.<CFGNode>singleton(this) : succ();
  inh SmallSet<CFGNode> CFGNode.nextNodes();
  inh SmallSet<CFGNode> CFGNode.nextNodesTT();
  inh SmallSet<CFGNode> CFGNode.nextNodesFF();
  syn boolean CFGNode.skip() =
      Analysis.getAnalysisInstance().getActiveNodes().contains(
          getClass().getSimpleName());
  // syn lazy boolean CFGNode.skip() = false;
  // eq Entry.skip() = true;
  // eq Exit.skip() = true;
  // eq VariableDeclarator.skip() = true;
  // eq AssignSimpleExpr.skip() = true;
  // eq AssignAdditiveExpr.skip() = true;
  // eq AssignMultiplicativeExpr.skip() = true;
  // eq AssignShiftExpr.skip() = true;
  // eq AssignBitwiseExpr.skip() = true;
  // eq PostIncExpr.skip() = true;
  // eq PostDecExpr.skip() = true;
  // eq PreIncExpr.skip() = true;
  // eq PreDecExpr.skip() = true;
  // eq VarAccess.skip() = true;
  // eq FieldDeclarator.skip() = true;
  // eq ParameterDeclaration.skip() = true;
  // eq NullLiteral.skip() = true;
  // eq ImplicitAssignment.skip() = true;
  // eq EQExpr.skip() = true;
  // eq NEExpr.skip() = true;
  // eq StringLiteral.skip() = true;
  // eq LambdaDefinition.skip() = true;
  // eq LambdaBody.skip() = true;
  // eq ExprMethodReference.skip() = true;
  // eq ClassReference.skip() = true;
  // eq ParMethodReferenceAccess.skip() = true;
  // eq AmbiguousMethodReference.skip() = true;
  // eq TypeMethodReference.skip() = true;
  // eq ConstructorReference.skip() = true;
  // eq InstanceInitialization.skip() = true;
  // eq Implicit.skip() = true;
  // eq ImplicitCondition.skip() = true;
  // eq NTACloseResource.skip() = true;
  // eq PackageAccess.skip() = true;
  // eq TypeAccess.skip() = true;
  // eq ArrayCreationExpr.skip() = true;
  // eq OrLogicalExpr.skip() = true;
  // eq AndLogicalExpr.skip() = true;
  // eq XorBitwiseExpr.skip() = true;
  // eq OrBitwiseExpr.skip() = true;
  // eq AndBitwiseExpr.skip() = true;
  // eq URShiftExpr.skip() = true;
  // eq RShiftExpr.skip() = true;
  // eq LShiftExpr.skip() = true;
  // eq SubExpr.skip() = true;
  // eq AddExpr.skip() = true;
  // eq ModExpr.skip() = true;
  // eq DivExpr.skip() = true;
  // eq MulExpr.skip() = true;
  // eq PlusExpr.skip() = true;
  // eq MinusExpr.skip() = true;
  // eq LogNotExpr.skip() = true;
  // eq BitNotExpr.skip() = true;
  // eq ParExpr.skip() = true;
  // eq ContinueStmt.skip() = true;
  // eq LongLiteral.skip() = true;
  // eq IntegerLiteral.skip() = true;
  // eq IllegalLiteral.skip() = true;
  // eq FloatingPointLiteral.skip() = true;
  // eq DoubleLiteral.skip() = true;
  // eq CharacterLiteral.skip() = true;
  // eq BooleanLiteral.skip() = true;
  // eq InferredParameterDeclaration.skip() = true;
  // eq EnumConstant.skip() = true;
  // eq CatchParameterDeclaration.skip() = true;
  // eq UncheckedExceptions.skip() = true;
  // eq AssertStmt.skip() = true;
  // eq CatchClause.skip() = true;
  // eq ThrowStmt.skip() = true;
  // eq LocalClassDeclStmt.skip() = true;
  // eq DefaultCase.skip() = true;
  // eq ConstCase.skip() = true;
  // eq ClassInstanceExpr.skip() = true;
  // eq InstanceOfExpr.skip() = true;
  // eq ReturnStmt.skip() = true;
  // eq ResourceDeclaration.skip() = true;
  // eq ArrayAccess.skip() = true;
  // eq SuperAccess.skip() = true;
  // eq ThisAccess.skip() = true;
  // eq ArrayTypeWithSizeAccess.skip() = true;
  // eq SuperConstructorAccess.skip() = true;
  // eq ConstructorAccess.skip() = true;
  // eq GEExpr.skip() = true;
  // eq LEExpr.skip() = true;
  // eq GTExpr.skip() = true;
  // eq LTExpr.skip() = true;
  // eq MethodAccess.skip() = true;

  // Defining Entry and Exit point for each CFGRoot
  syn nta Entry CFGRoot.entry() = new Entry();
  syn nta Exit CFGRoot.exit() = new Exit();

  // Forwarding the exit() and entry() attribute to each CFGSupport node.
  eq CFGRoot.getChild().exit() = exit();
  eq CFGRoot.getChild().entry() = entry();

  inh Exit CFGNode.exit();
  inh Entry CFGNode.entry();

  // Default values for the
  eq CFGRoot.getChild().nextNodes() = SmallSet.<CFGNode>empty();
  eq CFGRoot.getChild().nextNodesTT() = SmallSet.<CFGNode>empty();
  eq CFGRoot.getChild().nextNodesFF() = SmallSet.<CFGNode>empty();

  // Predecessor relation
  syn SmallSet<CFGNode> CFGNode.pred() {
    SmallSet<CFGNode> res = SmallSet.<CFGNode>empty().mutable();
    for (CFGNode pred : predColl()) {
      if (pred.isCFGNode())
        res.add(pred);
    }
    return res;
  }

  syn boolean CFGNode.isCFGNode() circular[false] {
    if (predColl().isEmpty())
      return false;
    for (CFGNode pred : predColl()) {
      if (pred.isCFGNode())
        return true;
    }
    return false;
  }
  eq Entry.isCFGNode() = true;

  coll SmallSet<CFGNode> CFGNode.predColl()[new SmallSet<CFGNode>()];
  CFGNode contributes this to CFGNode.predColl() for each succ();
}